Ships:
    1x Carrier (5)
    1x Battleship (4)
    2x Destroyer (3)
    2x Submarine (3)
    2x Patrol Boat (2)

Board:
    4 10x10 grids (two for each player)

Variations:
    classic (easy) - the game everyone is used to
    classic (hard) - doesn't tell you when a ship has been sunk
    Salvo (easy) - result of each shot shown
    Salvo (hard) - result of salvo in its entirety

Data:
    GAME_START (server -> client):
        - If the target user accepts, draw the boards
    GAME_PLACE (server <- & -> client):
        - Lets the server tell the user to place their ships (and draws their board)
        - Lets the user return where to place their ships on the starting baord (only can move ships before the first round)
    GAME_STATE (server -> client):
        - Opponent Board
        - Player Board
        - Game message (whether there was a hit, miss, etc.)
    GAME_TURN (client -> server):
        - Lets the user taget a location to fire a shot (or multiple for salvo)
    GAME_END (server -> client):
        - Who won (message)
        - Remove users from game & remove spectaters
        - Kill game thread

TODO:
- only sends a message when using /name -- when using /rename it doesnt, and only works if connected to a server
- It creates the battleship thread, but then nothing happens

Old BattleshipThread run():
run(){
    for (ServerThread player : players.keySet()) {
        Callable<Boolean> playerPlaceShip = () -> {
            Payload p = new Payload();
            p.setPayloadType(PayloadType.GAME_PLACE);
            StringBuilder message = new StringBuilder("Place your ships: ");
            message.append("ShipName : [Length, Quantity]");
            for (String ship : ShipData.keySet()) 
                message.append(String.format("%s : %d, ", ship, ShipData.get(ship)));  TODO: Format better (easier to read)
            p.setMessage(message.toString());
            p.setPlayerBoard(EMPTY_BOARD);
            List<Object> data = new ArrayList<>();
            for (Map.Entry<String, Integer[]> entry : ShipData.entrySet()) {
                data.add(entry.getKey());
                data.add(entry.getValue());
            }
            p.setOtherData(data.toArray());
            player.sendGameEvent(p);
            while (!hasPlacedShips(player)) {
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            return true;
        };
        TimedEvent placeShip = new TimedEvent(playerPlaceShip, () -> {
            TODO: Query for a gamestate? (even if not all ships have been placed, those that have will be used)
            addSpectator(player);
            removePlayer(player);
        }, 90);
        placeShip.start();
    }

    Random random = new Random();
    List<ServerThread> playerOrder = new ArrayList<>(players.keySet());
    Collections.shuffle(playerOrder, random);

    while (isRunning) {
        if (players.size() == 0) isRunning = false;
        for (ServerThread player : playerOrder) {
            Callable<Boolean> playerTakeTurn = () -> {
                Payload p = new Payload();
                p.setPayloadType(PayloadType.GAME_STATE);
                p.setPlayerBoard(players.get(player));
                for (ServerThread opponent : players.keySet())
                    if (opponent != player) p.addOpponentBoard(opponent.getClientName(), players.get(opponent));
                p.setMessage("Take your turn");
                player.sendGameEvent(p);
                return true;
            };

            TimedEvent takeTurn = new TimedEvent(playerTakeTurn, () -> {
            Payload p = new Payload();
            p.setPayloadType(PayloadType.GAME_MESSAGE);
            p.setMessage("You took too long to take your turn");
            player.sendGameEvent(p);
            }, 90);
            takeTurn.start();
        }
        for (ServerThread player : players.keySet()) {
            boolean noShips = hasPlacedShips(player);
            if (noShips) {
                addSpectator(player);
                removePlayer(player);
            }
        }
        if (players.size() == 1) {
            ServerThread winner = players.keySet().iterator().next();
            for (ServerThread spectator : spectators) {
                Payload p = new Payload();
                p.setPayloadType(PayloadType.GAME_MESSAGE);
                p.setMessage(winner.getClientName() + " has won the game!");
                spectator.sendGameEvent(p);
            }
            Payload p = new Payload();
            p.setPayloadType(PayloadType.GAME_MESSAGE);
            p.setMessage("You have won the game!");
            winner.sendGameEvent(p);
            System.out.println("Game over, " + winner.getClientName() + " has won the game!");
            isRunning = false;
        }
    }
}